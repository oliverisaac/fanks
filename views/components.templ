package views

import (
"github.com/oliverisaac/fanks/types"
"fmt"
"time"
)

func valueContent(note types.Note) string {
if note.ID == 0 {
return note.Content
}
return ""
}

templ CreateNoteForm(note types.Note, prompt string, err error) {
<div id="newnote" class="mb-4">
	<div class="text-2xl text-neutral-100 italic my-2">
		{ prompt }
	</div>
	<form hx-post="/note/create" hx-target="#newnote" class="flex items-start space-x-2">
		<input type="hidden" name="prompt" value={prompt} />
		<textarea name="content"
			class="w-full px-4 py-2 text-white rounded-md bg-neutral-800 focus:outline-none focus:ring-2 focus:ring-primary-600"
			rows="1"
			oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';">{valueContent(note)}</textarea>
		<input type="submit" class="px-4 py-2 text-white rounded-md bg-primary-600 hover:bg-primary-700" />
	</form>
	if err != nil {
	<p class="mt-2 text-sm text-red-500">
		{err.Error()}
	</p>
	}
</div>
if note.ID > 0 {
<div hx-swap-oob="afterbegin:#notes">
	@Note(note)
</div>
}
}

templ Note(note types.Note) {
<div id={ fmt.Sprintf("note-%d", note.ID) } class="p-4 mb-4 rounded-md bg-neutral-800 break-words">
	<div class="text-base text-neutral-400 italic">
		{ note.Prompt }
	</div>
	<div class="text-lg text-white">
		{ note.Content }
	</div>
	<div class="mt-2 text-sm text-neutral-400"></div>
	<div class="flex items-center justify-between mt-1">
		<div class="flex items-center space-x-2 text-sm">
			if note.User.Name == "oisaac" {
			<div class="font-bold text-primary-400">
				{ note.User.Name }
			</div>
			} else if note.User.Name == "ldisaac" {
			<div class="font-bold text-purple-600">
				{ note.User.Name }
			</div>
			} else {
			<div class="font-bold text-blue-500">
				{ note.User.Name }
			</div>
			}
			<div class="relative group">
				<div class="text-neutral-500 cursor-pointer" tabindex="0">
					{ note.CreatedAt.Format("Jan 2, 2006") }
				</div>
				<div
					class="absolute bottom-full left-1/2 -translate-x-1/2 px-2 py-1 text-sm text-white rounded-md bg-neutral-900 opacity-0 group-hover:opacity-100 group-focus:opacity-100 transition-opacity duration-300 pointer-events-none w-max">
					{ note.CreatedAt.Format(time.RFC1123Z) }
				</div>
			</div>
		</div>
		<button hx-delete={ fmt.Sprintf("/note/%d", note.ID) } hx-target={ fmt.Sprintf("#note-%d", note.ID) }
			hx-swap="outerHTML" hx-confirm="Are you sure you want to delete this note?"
			class="p-1 text-red-600 rounded-md hover:bg-neutral-700">
			<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none"
				stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<polyline points="3 6 5 6 21 6"></polyline>
				<path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
				<line x1="10" y1="11" x2="10" y2="17"></line>
				<line x1="14" y1="11" x2="14" y2="17"></line>
			</svg>
		</button>
	</div>
</div>
}

templ SignUpForm(err error) {
<div id="sign-up-form" class="flex flex-col items-center justify-center h-screen">
	<form hx-post="/auth/sign-up" hx-target="body" class="w-full max-w-md p-8 space-y-6 rounded-lg bg-neutral-800">
		<a href="/" title="Napp Home"
			class="flex items-center justify-center mb-6 space-x-2 text-2xl font-bold text-white">
			Fanks
		</a>

		<div>
			<label for="name" class="block mb-2 text-sm font-bold text-neutral-400">
				Name
			</label>
			<input id="name" type="text" name="name" autocomplete="name" value="" required
				class="w-full px-4 py-2 text-white rounded-md bg-neutral-900 focus:outline-none focus:ring-2 focus:ring-primary-600" />
		</div>

		<div>
			<label for="email" class="block mb-2 text-sm font-bold text-neutral-400">
				Email
			</label>
			<input id="email" type="text" name="email" autocomplete="email" value="" required
				class="w-full px-4 py-2 text-white rounded-md bg-neutral-900 focus:outline-none focus:ring-2 focus:ring-primary-600" />
		</div>

		<div>
			<label for="password" class="block mb-2 text-sm font-bold text-neutral-400">
				Password
			</label>
			<input id="password" type="password" name="password" value="" required
				class="w-full px-4 py-2 text-white rounded-md bg-neutral-900 focus:outline-none focus:ring-2 focus:ring-primary-600" />
		</div>

		<button type="submit"
			class="w-full px-4 py-2 text-white rounded-md bg-primary-600 hover:bg-primary-700">Register</button>

		if err != nil {
		<p class="mt-2 text-sm text-red-500">
			{err.Error()}
		</p>
		}

		<p class="text-sm text-center text-neutral-400">Already have an account? <button type="button"
				hx-get="/auth/sign-in" hx-target="body" class="font-bold text-primary-400 hover:underline">Sign
				In</button></p>
	</form>
</div>
}

templ SignInForm(config types.Config, err error) {
<div id="sign-in-form" class="flex flex-col items-center justify-center h-screen">
	<form hx-post="/auth/sign-in" hx-target="body" class="w-full max-w-md p-8 space-y-6 rounded-lg bg-neutral-800">
		<a href="/" title="Napp Home"
			class="flex items-center justify-center mb-6 space-x-2 text-2xl font-bold text-white">
			Fanks
		</a>

		<div>
			<label for="email" class="block mb-2 text-sm font-bold text-neutral-400">
				Email
			</label>
			<input id="email" type="text" name="email" autocomplete="email" value="" required
				class="w-full px-4 py-2 text-white rounded-md bg-neutral-900 focus:outline-none focus:ring-2 focus:ring-primary-600" />
		</div>

		<div>
			<label for="password" class="block mb-2 text-sm font-bold text-neutral-400">
				Password
			</label>
			<input id="password" type="password" name="password" value="" required
				class="w-full px-4 py-2 text-white rounded-md bg-neutral-900 focus:outline-none focus:ring-2 focus:ring-primary-600" />
		</div>

		<button type="submit" class="w-full px-4 py-2 text-white rounded-md bg-primary-600 hover:bg-primary-700">Sign
			In</button>

		if err != nil {
		<p class="mt-2 text-sm text-red-500">
			{err.Error()}
		</p>
		}

		if len(config.AllowSignupEmails) > 0 || config.AllowSignup {
		<p class="text-sm text-center text-neutral-400">Do you need an account? <button type="button"
				hx-get="/auth/sign-up" hx-target="body" class="font-bold text-primary-400 hover:underline">Register
				Now</button>
		</p>
		}
	</form>
</div>
}